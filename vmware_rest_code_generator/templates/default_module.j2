{% include 'header.j2' %}

# template: default_module.j2
def build_url(params):
    return (
        "https://{vcenter_hostname}"
        "{{path}}").format(**params)


async def entry_point(module, session):
    {% if operations|length > 1 %}
    if module.params['state'] == "present":
        if "_create" in globals():
            operation = "create"
        else:
            operation = "update"
    elif module.params['state'] == "absent":
        operation = "delete"
    else:
        operation = module.params['state']

    func = globals()["_" + operation]
    {% else %}
    func = globals()["_{{operations.keys()|list|first}}"]
    {% endif %}
    return await func(module.params, session)

{% for operation in operations|sort -%}
{% set verb = operations[operation][0] %}
{% set path = operations[operation][1] %}

{% if operation == "delete" -%}
async def _delete(params, session):
    _in_query_parameters = PAYLOAD_FORMAT["delete"]["query"].keys()
    payload = prepare_payload(params, PAYLOAD_FORMAT["delete"])
    subdevice_type = get_subdevice_type("{{ path }}")
    if subdevice_type and not params[subdevice_type]:
        _json = (await exists(params, session, build_url(params)))
        if _json:
            params[subdevice_type] = _json['id']
    _url = (
        "https://{vcenter_hostname}"
        "{{path}}").format(**params) + gen_args(params, _in_query_parameters)
    async with session.{{ verb }}(_url, json=payload) as resp:
        try:
            if resp.headers["Content-Type"] == "application/json":
                _json = await resp.json()
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "delete")


{% elif operation == "create" -%}
async def _create(params, session):

    if params["{{list_index}}"]:
        _json = await get_device_info(session, build_url(params), params["{{list_index}}"])
    else:
        _json = await exists(params, session, build_url(params), ["{{list_index}}"])
    if _json:
        if "_update" in globals():
            params["{{list_index}}"] = _json["id"]
            return (await globals()["_update"](params, session))
        return (await update_changed_flag(_json, 200, 'get'))

    payload = prepare_payload(params, PAYLOAD_FORMAT["create"])
    _url = (
        "https://{vcenter_hostname}"
        "{{ path }}").format(**params)
    async with session.{{ verb }}(_url, json=payload) as resp:
        if resp.status == 500:
            text = await resp.text()
            raise EmbeddedModuleFailure(f"Request has failed: status={resp.status}, {text}")
        try:
            if resp.headers["Content-Type"] == "application/json":
                _json = await resp.json()
        except KeyError:
            _json = {}
        # Update the value field with all the details
        if (resp.status in [200, 201]) and "value" in _json:
            if isinstance(_json["value"], dict):
                _id = list(_json["value"].values())[0]
            else:
                _id = _json["value"]
            _json = await get_device_info(session, _url, _id)

        return await update_changed_flag(_json, resp.status, "create")


{% elif operation == "update" -%}
async def _update(params, session):
    payload = prepare_payload(params, PAYLOAD_FORMAT["update"])
    _url = (
        "https://{vcenter_hostname}"
        "{{ path }}").format(**params)
    async with session.get(_url) as resp:
        _json = await resp.json()
        for k, v in _json["value"].items():
            if k in payload and payload[k] == v:
                del payload[k]
            elif "spec" in payload:
                if k in payload["spec"] and payload["spec"][k] == v:
                    del payload["spec"][k]


        {% if name == "vcenter_vm_hardware" -%}
        # NOTE: workaround for vcenter_vm_hardware, upgrade_version needs the upgrade_policy
        # option. So we ensure it's here.
        try:
            if payload["spec"]["upgrade_version"] and "upgrade_policy" not in payload["spec"]:
                payload["spec"]["upgrade_policy"] = _json["value"]["upgrade_policy"]
        except KeyError:
            pass
        {% endif -%}

        if payload == {} or payload == {"spec": {}}:
            # Nothing has changed
            _json["id"] = params.get("{{list_index}}")
            return await update_changed_flag(_json, resp.status, "get")
    async with session.{{ verb }}(_url, json=payload) as resp:
        try:
            if resp.headers["Content-Type"] == "application/json":
                _json = await resp.json()
        except KeyError:
            _json = {}
        _json["id"] = params.get("{{list_index}}")
        return await update_changed_flag(_json, resp.status, "update")
{% elif operation not in ["get", "list"] %}

async def _{{ operation }}(params, session):
    _in_query_parameters = PAYLOAD_FORMAT["{{ operation }}"]["query"].keys()
    payload = prepare_payload(params, PAYLOAD_FORMAT["{{ operation }}"])
    subdevice_type = get_subdevice_type("{{ path }}")
    if subdevice_type and not params[subdevice_type]:
        _json = (await exists(params, session, build_url(params)))
        if _json:
            params[subdevice_type] = _json['id']
    _url = (
        "https://{vcenter_hostname}"
        "{{ path }}").format(**params) + gen_args(params, _in_query_parameters)
    async with session.{{ verb }}(_url, json=payload) as resp:
        try:
            if resp.headers["Content-Type"] == "application/json":
                _json = await resp.json()
        except KeyError:
            _json = {}
        return await update_changed_flag(_json, resp.status, "{{ operation }}")
{% endif %}

{% endfor %}


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
